apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
  labels:
    app: food
spec:
  replicas: 2
  selector:
    matchLabels:
      app: food
  template:
    metadata:
      labels:
        app: food
    spec:
      volumes:
        - name: webapp
          hostPath:
            path: /root/food
      containers:
        - name: food
          image: ubuntu/apache2
          volumeMounts:
            - name: webapp
              mountPath: /var/www/html
########################################################################################################################################
########################################################################################################################################
##
##    This yaml is to test the deployment functionality of K8s. This also contains some notes. Deployment uses ReplicaSet in the backend
## to deploy the pods and manages them as per the parameters described.
##
##    Before executing this yaml file, please make sure the availability of the source code in the specified host path on all
## all the nodes in the cluster, in order to avoid getting an error page as result. 
##
##  The major commands used in deployment are:
##
## To create deployment : kubectl create deploy -f <file/path>
## To make edits to the deployment : kubectl edit deploy <deployment_name>
## To check the roll out history : kubectl rollout history deploy <deployment_name>
## To undo deployment to previous version, i.e., to roll back an update : kubectl rollout undo deploy <deployment_name>
##       To roll back the deployment, multiple steps backward on the go, i.e., to a particular revision number :
## kubectl rollout undo deploy <deployment_name> --to-revision=n
## where 'n' is the revision number and can be obtained and verified by executing : kubectl rollout history deploy <deployment_name>
## To fetch the details of a particular revision, execute the same command with the flag, --revision=n ; where n is the no. of revision made.
##
## For more INFO : https://kubernetes.io/docs/concepts/workloads/controllers/deployment/
##################################################################################################################################################
##################################################################################################################################################
